import io
import base64
from jinja2 import Template
from xhtml2pdf import pisa

def generate_report_pdf(
    title="ANSAR HOSPITAL",
    subtitle="",
    start_date=None,
    end_date=None,
    headers=None,
    rows=None,
    logo_path=None,
    footer="Generated by Ansar Hospital"
):
    try:
        logo_data = ""
        if logo_path:
            with open(logo_path, "rb") as image_file:
                logo_b64 = base64.b64encode(image_file.read()).decode("utf-8")
                logo_data = f"data:image/png;base64,{logo_b64}"

        # Define column widths in percentages (must match number of headers)
        col_widths = [
            "5%",   # #
            "10%",  # ID
            "15%",  # Name
            "25%",  # Check-In
            "25%",  # Check-Out
            "15%",  # Status
            "15%"   # Submitted By
        ]

        html_template = """
        <html>
        <head>
            <style>
                @page { size: A4 landscape; margin: 30px; }
                body { font-family: Arial, sans-serif; font-size: 10px; }
                .header { text-align: center; margin-bottom: 10px; }
                .logo { width: 90px; margin-bottom: 5px; }
                .title { font-size: 18px; font-weight: bold; }
                .subtitle { font-size: 13px; margin-bottom: 5px; }
                table { width: 100%; border-collapse: collapse; margin-top: 10px; table-layout: fixed; }
                th, td {
                    border: 1px solid #000;
                    padding: 5px;
                    text-align: center;
                    word-wrap: break-word;
                    overflow-wrap: break-word;
                }
                th { background-color: #f2f2f2; }
                .footer {
                    position: fixed;
                    bottom: 10px;
                    left: 0;
                    right: 0;
                    text-align: center;
                    font-size: 9px;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <div class="header">
                {% if logo_data %}
                <img src="{{ logo_data }}" class="logo">
                {% endif %}
                <div class="title">{{ title }}</div>
                {% if subtitle %}<div class="subtitle">{{ subtitle }}</div>{% endif %}
                {% if start_date or end_date %}
                <div class="subtitle">{{ start_date }} {% if end_date %}to {{ end_date }}{% endif %}</div>
                {% endif %}
            </div>

            <table>
                <thead>
                    <tr>
                        {% for header, width in zipped %}
                        <th style="width: {{ width }}; word-wrap: break-word; overflow-wrap: break-word;">{{ header }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for row in rows %}
                    <tr>
                        {% for cell in row %}
                            {% if loop.index0 == 4 %}
                                <td style="width: 20%; word-wrap: break-word; overflow-wrap: break-word;">{{ cell }}</td>
                            {% else %}
                                <td>{{ cell }}</td>
                            {% endif %}
                        {% endfor %}
                    </tr>
                    {% endfor %}
                </tbody>

            </table>

            <div class="footer">{{ footer }}</div>
        </body>
        </html>
        """

        html = Template(html_template).render(
            title=title,
            subtitle=subtitle,
            start_date=start_date,
            end_date=end_date,
            headers=headers or [],
            rows=rows or [],
            logo_data=logo_data,
            footer=footer,
            zipped=list(zip(headers or [], col_widths))
        )

        pdf_io = io.BytesIO()
        pisa_status = pisa.CreatePDF(io.StringIO(html), dest=pdf_io)
        if pisa_status.err:
            raise RuntimeError("PDF generation failed.")
        pdf_io.seek(0)
        return pdf_io.read()

    except Exception as e:
        raise RuntimeError(f"‚ùå PDF creation error: {e}")
